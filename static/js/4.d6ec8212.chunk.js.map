{"version":3,"sources":["containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","pass","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.d6ec8212.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2N4mh\"};","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport {updateObject,checkValidity} from '../../shared/utility';\n\nclass Auth extends Component {\n\n    state={\n        controls:{\n            email: {\n                elementType: 'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder: 'Email Address'\n                },\n                value: '',\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid: false,\n                touched:false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid: false,\n                touched:false\n            },\n        },\n        isSignup: true\n    }\n\n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authRedirectPath){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls,{\n            [controlName]: updateObject(this.state.controls[controlName],{\n                value: event.target.value,\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\n                touched:true\n            })\n        });\n        this.setState({controls:updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup:!prevState.isSignup};\n        });\n    }\n\n    render(){\n\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id:key,\n                config: this.state.controls[key]\n            });\n        };\n\n        let form = formElementsArray.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType} \n                elementConfig={formElement.config.elementConfig} \n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\n        ));\n\n        if(this.props.loading){\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if(this.props.error){\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\n\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                <form onSubmit={this.submitHandler}>\n                    {errorMessage}\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    btnType=\"Danger\"\n                    clicked={this.switchAuthModeHandler}>SWITCH TO {this.state.isSignup? 'SIGNIN':'SIGNUP'}</Button>\n            </div>\n        );\n    }\n} \n\nconst mapStateToProps = state => {\n    return{\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token!==null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth:(email, pass, isSignup)=> dispatch(actions.auth(email,pass,isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","import React from 'react';\nimport classes from './Input.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch(props.elementType) {\n        case('input'):\n        inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\n        break;\n        case('textarea'):\n            inputElement= <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\n            break;\n        case('select'):\n            inputElement = (\n                <select \n                    className={inputClasses.join(' ')} \n                    value={props.value} onChange={props.changed}> \n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}/>\n    }\n\n\nreturn(\n    <div className={classes.Input}>\n        <label className={classes.Label}>{props.label}</label>\n        {inputElement}\n    </div>\n)\n\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__2JD9x\",\"Label\":\"Input__Label__1BS4V\",\"InputElement\":\"Input__InputElement__2h6u9\",\"Invalid\":\"Input__Invalid__3PMZL\"};"],"sourceRoot":""}